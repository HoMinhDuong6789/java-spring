-- phpMyAdmin SQL Dump
-- version 4.9.2
-- https://www.phpmyadmin.net/
--
-- Máy chủ: 127.0.0.1
-- Thời gian đã tạo: Th6 03, 2020 lúc 10:19 AM
-- Phiên bản máy phục vụ: 10.4.11-MariaDB
-- Phiên bản PHP: 7.2.26

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Cơ sở dữ liệu: `jspservletjdbc`
--

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `category`
--

CREATE TABLE `category` (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_vietnamese_ci NOT NULL,
  `code` varchar(255) COLLATE utf8mb4_vietnamese_ci NOT NULL,
  `createddate` timestamp NULL DEFAULT NULL,
  `modifieddate` timestamp NULL DEFAULT NULL,
  `createdby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `modifiedby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_vietnamese_ci;

--
-- Đang đổ dữ liệu cho bảng `category`
--

INSERT INTO `category` (`id`, `name`, `code`, `createddate`, `modifieddate`, `createdby`, `modifiedby`) VALUES
(1, 'The thao', 'the thao', NULL, NULL, NULL, NULL),
(2, 'Chinh tri', 'chinh tri', NULL, NULL, NULL, NULL),
(3, 'Van hoa', 'van hoa', NULL, NULL, NULL, NULL),
(4, 'Giai tri', 'giai tri', NULL, NULL, NULL, NULL),
(5, 'Giao duc', 'giao duc', NULL, NULL, NULL, NULL),
(6, 'Kinh te', 'kinh te', NULL, NULL, NULL, NULL);

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `comment`
--

CREATE TABLE `comment` (
  `id` bigint(20) NOT NULL,
  `content` text COLLATE utf8mb4_vietnamese_ci NOT NULL,
  `user_id` bigint(20) NOT NULL,
  `new_id` bigint(20) NOT NULL,
  `createddate` timestamp NULL DEFAULT NULL,
  `modifieddate` timestamp NULL DEFAULT NULL,
  `createdby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `modifiedby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_vietnamese_ci;

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `news`
--

CREATE TABLE `news` (
  `id` bigint(20) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `thumbnail` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `shortdescription` text COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `content` text COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `categoryid` bigint(20) NOT NULL,
  `createddate` timestamp NULL DEFAULT NULL,
  `modifieddate` timestamp NULL DEFAULT NULL,
  `createdby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `modifiedby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_vietnamese_ci;

--
-- Đang đổ dữ liệu cho bảng `news`
--

INSERT INTO `news` (`id`, `title`, `thumbnail`, `shortdescription`, `content`, `categoryid`, `createddate`, `modifieddate`, `createdby`, `modifiedby`) VALUES
(1, 'Noi ay toi tim ve', '', 'noi con cat tieng khoc chao doi laf loi me ru trong vong tay am long, la lala alalala', '', 2, '2020-06-03 02:58:56', NULL, 'admin', NULL),
(2, 'These four “clean code” tips will dramatically improve your engineering team’s productivity', NULL, 'Several years ago we were definitely in the room on the right but we’ve moved a lot closer to the room on the left.', 'A few years ago at VideoBlocks we had a major code quality problem: “spaghetti” logic in most files, tons of duplication, no tests and more. Writing new features and even minor bug fixes required a couple of Tums at best and entire bottles of Pepto-Bismol and Scotch far too often. Our WTFs per minute were sky-high.\r\nToday, the overall quality of our codebases are significantly better thanks in large part to a deliberate effort to improve code quality. A couple ago when we identified the problem, we read Robert Martin’s Clean Code as a team and did our best to implement his recommendations and even introduced “clean code” as a core cultural tenant for the engineering team. I highly recommend doing both as you start scaling. Implementing “clean code” practices appropriately will double productivity in the long run (at a bare minimum) and significantly improve moral on the engineering team. Who wants to be in the room on the right given the choice?\r\nOut of all the ideas we implemented from Clean Code and other sources, five provided at least 80% of the gains in productivity and team happiness.\r\n“If it isn’t tested, it’s broken”\r\nWrite lots of tests, especially unit tests, or you’ll regret it.\r\nChoose meaningful names\r\nUse short and precise names for variables, classes, and functions.\r\nClasses and functions should be small and obey the Single Responsibility Principle (SRP)\r\nFunctions should be no more than 4 lines and classes no more than 100 lines. Yep, you read that correctly. They should also do one and only one thing.\r\nFunctions should have no side effects\r\nSide effects (e.g., modifying an input argument) are evil. Make sure not to have them in your code. Specify this explicitly in the function contracts where possible (e.g., pass in native types or objects that have no setters)\r\nLet’s walk through each one in detail so you can understand and start applying them in your day-to-day life on an engineering team.', 5, '2020-02-11 17:00:00', '2020-04-07 17:00:00', 'Jonathan Fulton', 'Jonathan Fulton'),
(3, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n3. Choose the right tools and join programming communities.\r\nLet’s be honest: a perfect Java course doesn’t exist. Some will give you a profound basic knowledge, some will provide with a good deal of practice. Choose a few platforms for education, communication, and practice. Choose one online course which combines a plain explanation of theory with the real coding.\r\nJoin the communities, where you can ask any question about the aspects of coding on Java, share your thoughts and find like-minded people. The top communities for Java developers are listed below.\r\nUse multiple sources for learning Java\r\nYou will need lots of tools to accomplish your goals. Here’s a set of “tools” for you to succeed.\r\nStrictly practice: CodeAcademy\r\nThis is probably one of the best-known online platforms for learning numerous languages. Of course, there’s a section for Java learners, too. Here you start coding from the first lesson. There are pretty useful hints, which you can get if a certain task seems to be tough (which is normal when you are a beginner). The logic is simple: read the task, write code and run it to see what happens as a result, and then move to the next step. The tasks gradually become more complicated, until you start to write your code from a clean sheet. The FAQ section is pretty useful and you have an option to discuss each task with other students.\r\nThis course can be a great complementary tool in learning Java. As told before, you need to code to master Java programming.\r\n2. Play and code from the beginning: CodeGym.cc\r\nThese are online courses for Java learners with a special feature — gamification. Nowadays it’s common for online courses to adopt gamified elements, as they bring instant motivation, a sense of constant achievements and make it easier to reach your goal.\r\nAt CodeGym’s you start from level 0 in the futuristic universe with space travel, robots, and other cool things. Your aim is to pass four educational quests to level up a character — a robot. Each quest includes 10 levels, and each level has up to 10–12 lessons, taught by crew members of a galactic ship. A lesson consists of a minimum theory and a set of tasks with instant verification and tips on how to improve your code. You start coding from the beginning, solving very simple tasks, until you’re ready for much more complicated and massive coding projects.\r\nThe whole story allows you not to get stuck on a certain subject or task, move forward and return later to the “twisters”. All in all, there are impressive 1200+ tasks in a course. An amount that converts in at least 300–500 hours of coding.\r\n3. Challenge programmers: Codewars\r\nThis is another online platform with tons of practice. Though it’s more suitable for learners with at least a small background in programming. Codewars empower you to sharpen skills in a certain language by training katas.\r\nYou can write your code in a browser and use test cases to check it step by step. You can also compare your solution with others to broaden your knowledge and discuss the best practices. Each kata has a rank, and each kata is a challenge with other programmers. When you solve more difficult tasks, you can get more complicated challenges to improve coding skills. What differs this platform from others is that it allows to study and practice in a group.\r\n4. Listen to the lectures of a “pro” level: EdX\r\nEdX is an educational platform founded by Harvard University and MIT. It covers many fields of study, including Java programming and many related subjects. There are plenty of verified introductory courses and certificate programs, provided by universities.\r\nEach course has a defined time frame and includes video lectures with a text transcript. It’s easy to return to previous lessons and revise the material. There are dozens of different courses, some of them are free. But still, this is a source strictly for learning Java theory. Be sure to strengthen those courses with hours of coding.\r\nWant to stay tuned to the latest news, reviews and updated in Java world? That’s the right thing to do. Java is constantly evolving, upgrading and bringing new features. Be sure to have a couple of media you can read daily. One of the largest are:\r\nJavaworld (news, useful tutorials, “how to’s” and everything else to keep you up to date with Java programming);\r\nJava Code Geeks (a resource center for those who learn Java with educational tutorials, articles, and tips on how to get a job as a Java programmer);\r\nDZone (plenty of articles and guides for beginners and experienced developers);\r\nJavarevisited (a daily updated blog which covers numerous Java learning topics).\r\nDo you remember the advice to join a community to make your education more effective? You can ask any question in Stack Overflow’s Java section or Coderanch. Also, there are at least three large communities on Reddit, like learnprogramming, java and learnjava, where you will find useful tips on learning Java and programming in general. If you need more specific information, for example, a hint on improving your code in the certain tasks, try the special help section at CodeGym, where other students and “coding coaches” will help you with any problem. And finally, Oracle has a vast Java Community, open for both the newcomers and experienced developers.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n'),
(4, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n'),
(5, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n'),
(6, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n'),
(7, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n');
INSERT INTO `news` (`id`, `title`, `thumbnail`, `shortdescription`, `content`, `categoryid`, `createddate`, `modifieddate`, `createdby`, `modifiedby`) VALUES
(8, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n'),
(9, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n'),
(10, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n'),
(11, 'How to learn to code in Java: why you should and where to start', NULL, 'Being a programmer means constant improvement and gaining new knowledge. If you develop a knack for self-education from the start, you’ll succeed by all means. Are you ready to try?', 'Define your career goals and choose a language. This is the most important advice for anyone who has zero experience in programming and aims to join the developers’ community. But how can you make a choice having no idea which language suits your purposes the most?\r\nWouldn’t it be easy if there was a “market leader” among all programming languages? Then all newcomers could always have a safe choice — learn this language and you’ll surely be in high demand. Of course, it’s impossible. Languages are “tools” for solving numerous tasks. But still, there’s one which can be considered as a stellar choice — it’s Java.\r\nJava is a well-structured, object-oriented language, which can be considered easy for beginners. You can master it quite rapidly, as there are many processes that run automatically. You don’t have to delve into “how the things work in there” too deep. Java is a cross-platform language. It allows a programmer to create an application, which can be deployed on any device. It’s the language of choice for the Internet of Things and the right tool for building enterprise-level applications.\r\nWhat’s important for a “freshman”, Java has one of the biggest global communities and high-quality documentation. If you have a problem, it’s more than likely that the answer is ready there, waiting for you. Two more benefits of Java are vast collections and frameworks that cover most of the challenges you’ll have to deal with as a Junior developer.\r\nFinally, it is a language with a respectable background and a prominent future. Two latest versions, enhanced with new features, were released within six months of each other. This helps Java to stand on the front burner and keep the highest positions in respectable professional rankings.\r\nBut even when we’re talking about a programming language with a low learning curve, there are plenty of hidden rocks for beginners. How much time do you need to learn? Which sources to trust? Which mistakes to avoid? Let’s go all the way through your learning experience.\r\nEnsure you bypass the common obstacles\r\nSo, you’re new to programming. Congratulations: as you can make use of other programmers’ experience and avoid the common mistakes in a self-education. Here are some frequent lapses.\r\nLearning without setting a specific goal\r\n\r\nTo estimate the scale and desired level of knowledge in a certain programming language, first of all, you should answer a simple question: why do you need programming?\r\nIf you’re serious about coding and intend to become a Java developer, you’ll need to study every day for at least 4–5 hours. But if you simply want to enlarge your scope, you can choose a more relaxed tempo. Anyway, try not to extend your education for many years to come, because the technologies evolve. While you learn a certain framework or development tool to get a job, it becomes outdated.\r\nReading “anything useful” that pops up isn’t the best strategy of learning. It’s okay to make adjustments to the general plan. However, not following it at all will inevitably demotivate you.\r\nAn attempt to learn too many technologies at once\r\nThis a subsequent mistake, which leads to learning without an end. Don’t try to stuff your educational plan with too many technologies and tools to avoid burnout. You’ll need time to process the information and see how everything works on practice.\r\nToo much research and theory without practice\r\n\r\nProgramming is a skill which you can gain only with lots of practice. You’ll need a serious background in theory, but as long as you only read (or watch) lectures and courses, you can’t really code. Think about it. Nobody can learn how to swim without trying it. You need explanations, but above all, you need action.\r\nOnly plenty of practice will teach you how to deal with everyday programmers’ problems. For example, you’ll get a habit to check your code regularly and not let the connected problems to pile up. You will also start with the easiest solutions. Then move to more exquisite, constantly working on the improvement of your code. And the most important, you’ll get used to coding on a daily basis.\r\nLearning to code in isolation\r\nBeginners often hesitate, whether they should join online programming communities or attend events, mainly because of imposter syndrome. But remember: nobody wants to bring you down. The programming community is collaborative. This is how numerous open data sources appear. They’re used to work in a team, and surely, all of them were beginners at a certain moment of life.\r\nTake a look: there are plenty of forums and web sources on programming. Developers eagerly share their knowledge and are open to collaborations. You can start learning online, get a useful hint from more experienced colleagues and later, find your first coding project.\r\nBeing sure that one day you will fully understand all aspects of programming\r\nIf anyone discovered a pill to take and immediately get skilled at any programming language, he’d be the richest person on the planet (sorry, Jeff Bezos). But until then, there’s no certain end in your education, if you’ve chosen to be a programmer. Even when you have a job, never stop learning. Things change rapidly in a programming world.\r\nOn the other side, when you’re still learning how to code, try to accept some facts as they are. Do not dig into every subject, as its background might be too “heavy”.\r\nMake a perfect training program\r\nIt’s easier to achieve your aim step by step. Now, when you know the common mistakes, you can avoid them. Here are five steps you can take to learn Java.\r\nSet a goal and choose a language.\r\nYou can do pretty much anything with Java. You can build application servers, desktop, and mobile applications, enterprise applications, and run unit tests. But of course, a programming language isn’t everything you need to know to become a pro. Try to think of specific activity areas.\r\nToday’s trends are building cloud-based applications (you’ll also need to learn cloud computing basics and specific tools for cloud development), working with the Internet of Things, performing Big data analysis, creating games, etc.\r\n2. Create an educational plan.\r\nAre you ready to make Java programming your profession? Then dedicate at least 2–3 (on the workdays) to 5 hours (on the weekends) to studying daily. In this case, you will likely need 3 to 6 months to prepare for a Junior developer position.\r\nIn general, your learning process will be divided into a few stages:\r\nInstallation of JDK (Java Development Kit) from Oracle website and Installation of Java runtime environment (IntelliJ IDEA, Eclipse or NetBeans);\r\nLearning Java Syntax;\r\nLearning Java Core;\r\nLearning Java Collections;\r\nLearning popular libraries and frameworks;\r\nExploring frequently used APIs (for example, servlets, JSP, JDBC, JUnit);\r\nMastering Git;\r\nAnd so on.\r\nTry to follow your plan and keep the balance between theory and practice. Programming is a skill that needs training every day. If you finish studying a certain subject, continue with a few coding tasks (3 to 10, depending on their difficulty).\r\nYou can easily adjust the well-known Pareto principle (80/20 rule) to Java learning. The “20” will stand for research and “80” for practice. This is not an exaggeration: you’ll need four times more coding than reading to memorize what you’ve learned and developed your coding skills. Unfortunately, if you won’t write your code at once, you will forget everything you’ve read on the next day. Luckily, you don’t need to invent your own training program, if you have the right sources.\r\n', 5, '2019-11-11 17:00:00', '2020-01-05 17:00:00', '\r\nJohn Selawsky', '\r\nJohn Selawsky\r\n');

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `role`
--

CREATE TABLE `role` (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_vietnamese_ci NOT NULL,
  `code` varchar(255) COLLATE utf8mb4_vietnamese_ci NOT NULL,
  `createddate` timestamp NULL DEFAULT NULL,
  `modifieddate` timestamp NULL DEFAULT NULL,
  `createdby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `modifiedby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_vietnamese_ci;

--
-- Đang đổ dữ liệu cho bảng `role`
--

INSERT INTO `role` (`id`, `name`, `code`, `createddate`, `modifieddate`, `createdby`, `modifiedby`) VALUES
(1, 'ADMIN', 'ADMIN', NULL, NULL, NULL, NULL),
(2, 'USER', 'USER', NULL, NULL, NULL, NULL);

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `user`
--

CREATE TABLE `user` (
  `id` bigint(20) NOT NULL,
  `username` varchar(150) COLLATE utf8mb4_vietnamese_ci NOT NULL,
  `password` varchar(150) COLLATE utf8mb4_vietnamese_ci NOT NULL,
  `fullname` varchar(150) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `status` int(11) NOT NULL,
  `roleid` bigint(20) NOT NULL,
  `createddate` timestamp NULL DEFAULT NULL,
  `modifieddate` timestamp NULL DEFAULT NULL,
  `createdby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL,
  `modifiedby` varchar(255) COLLATE utf8mb4_vietnamese_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_vietnamese_ci;

--
-- Đang đổ dữ liệu cho bảng `user`
--

INSERT INTO `user` (`id`, `username`, `password`, `fullname`, `status`, `roleid`, `createddate`, `modifieddate`, `createdby`, `modifiedby`) VALUES
(1, 'admin', '123456', 'admin', 1, 1, NULL, NULL, NULL, NULL),
(2, 'nguyenvana', '123456', 'nguyen van a', 1, 2, NULL, NULL, NULL, NULL),
(3, 'nguyenvanb', '123456', 'nguyen van b', 1, 2, NULL, NULL, NULL, NULL);

--
-- Chỉ mục cho các bảng đã đổ
--

--
-- Chỉ mục cho bảng `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Chỉ mục cho bảng `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_comment_user` (`user_id`),
  ADD KEY `fk_comment_news` (`new_id`);

--
-- Chỉ mục cho bảng `news`
--
ALTER TABLE `news`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_news_category` (`categoryid`);

--
-- Chỉ mục cho bảng `role`
--
ALTER TABLE `role`
  ADD PRIMARY KEY (`id`);

--
-- Chỉ mục cho bảng `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_user_role` (`roleid`);

--
-- AUTO_INCREMENT cho các bảng đã đổ
--

--
-- AUTO_INCREMENT cho bảng `category`
--
ALTER TABLE `category`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT cho bảng `comment`
--
ALTER TABLE `comment`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT cho bảng `news`
--
ALTER TABLE `news`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT cho bảng `role`
--
ALTER TABLE `role`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT cho bảng `user`
--
ALTER TABLE `user`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- Các ràng buộc cho các bảng đã đổ
--

--
-- Các ràng buộc cho bảng `comment`
--
ALTER TABLE `comment`
  ADD CONSTRAINT `fk_comment_news` FOREIGN KEY (`new_id`) REFERENCES `news` (`id`),
  ADD CONSTRAINT `fk_comment_user` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`);

--
-- Các ràng buộc cho bảng `news`
--
ALTER TABLE `news`
  ADD CONSTRAINT `fk_news_category` FOREIGN KEY (`categoryid`) REFERENCES `category` (`id`);

--
-- Các ràng buộc cho bảng `user`
--
ALTER TABLE `user`
  ADD CONSTRAINT `fk_user_role` FOREIGN KEY (`roleid`) REFERENCES `role` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
